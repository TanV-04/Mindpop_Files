# -*- coding: utf-8 -*-
"""
Offline Dyslexia Reading Test with Final Summary
Randomly selects Hindi sentences and evaluates pronunciation accuracy.
Requires:
    pip install SpeechRecognition fuzzywuzzy python-Levenshtein
"""

import random
import speech_recognition as sr
from fuzzywuzzy import fuzz
import statistics

# ------------------------------------------------------------
# 1я╕ПтГг  Hindi sentences (expand this list as much as you like)
# ------------------------------------------------------------
sentences = [
    "рднрд╛рд░рдд рдПрдХ рд╡рд┐рд╢рд╛рд▓ рджреЗрд╢ рд╣реИ рдФрд░ рдЗрд╕рдХреА рд╕рдВрд╕реНрдХреГрддрд┐ рд╡рд┐рд╡рд┐рдзрддрд╛ рд╕реЗ рднрд░рдкреВрд░ рд╣реИред",
    "рдЧрдВрдЧрд╛ рдирджреА рднрд╛рд░рдд рдХреА рд╕рдмрд╕реЗ рдкрд╡рд┐рддреНрд░ рдирджрд┐рдпреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдорд╛рдиреА рдЬрд╛рддреА рд╣реИред",
    "рддрд╛рдЬрдорд╣рд▓ рдкреНрд░реЗрдо рдХрд╛ рдЕрджреНрднреБрдд рдкреНрд░рддреАрдХ рд╣реИред",
    "рд╣рд┐рдорд╛рд▓рдп рдкрд░реНрд╡рдд рд╢реНрд░реГрдВрдЦрд▓рд╛ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд╕реМрдВрджрд░реНрдп рдХрд╛ рдЦрдЬрд╛рдирд╛ рд╣реИред",
    "рджрд┐рд▓реНрд▓реА рднрд╛рд░рдд рдХреА рд░рд╛рдЬрдзрд╛рдиреА рдФрд░ рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдзрд░реЛрд╣рд░реЛрдВ рдХрд╛ рдХреЗрдВрджреНрд░ рд╣реИред",
    "рд╕рддреНрдп рдФрд░ рдЕрд╣рд┐рдВрд╕рд╛ рдорд╣рд╛рддреНрдорд╛ рдЧрд╛рдВрдзреА рдХреЗ рдореБрдЦреНрдп рд╕рд┐рджреНрдзрд╛рдВрдд рдереЗред",
    "рднрд╛рд░рдд рдореЗрдВ рд╡рд┐рднрд┐рдиреНрди рднрд╛рд╖рд╛рдПрдБ рдФрд░ рдкрд░рдВрдкрд░рд╛рдПрдБ рдПрдХрддрд╛ рдореЗрдВ рдмрдВрдзреА рд╣реИрдВред",
    "рдХрдбрд╝реА рдореЗрд╣рдирдд рдФрд░ рджреГрдврд╝ рдирд┐рд╢реНрдЪрдп рд╕рдлрд▓рддрд╛ рдХреА рдХреБрдВрдЬреА рд╣реИрдВред",
    "рдкреЗрдбрд╝ рд╣рдореЗрдВ рд╕реНрд╡рдЪреНрдЫ рд╣рд╡рд╛ рдФрд░ рдЫрд╛рдпрд╛ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВред",
    "рдкреБрд╕реНрддрдХреЗрдВ рдЬреНрдЮрд╛рди рдХрд╛ рд╕рдмрд╕реЗ рдмрдбрд╝рд╛ рд╕реНрд░реЛрдд рд╣реЛрддреА рд╣реИрдВред"
]

LINES_PER_TEST = 3
chosen_lines = random.sample(sentences, k=LINES_PER_TEST)

recognizer = sr.Recognizer()
all_scores = []  # store accuracies for final summary

# ------------------------------------------------------------
# 2я╕ПтГг  Test loop
# ------------------------------------------------------------
for idx, hindi_text in enumerate(chosen_lines, 1):
    print(f"\nрдкрдВрдХреНрддрд┐ {idx} рдореЗрдВ рд╕реЗ {LINES_PER_TEST}")
    print("рдХреГрдкрдпрд╛ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╡рд╛рдХреНрдп рдЬреЛрд░ рд╕реЗ рдкрдврд╝реЗрдВ:\n")
    print("ЁЯСЙ", hindi_text)
    input("\nрдкрдврд╝рдирд╛ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП Enter рджрдмрд╛рдПрдБ...")

    # ---- record speech ----
    with sr.Microphone() as source:
        print("\nЁЯОд рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╣реЛ рд░рд╣реА рд╣реИ... рдмреЛрд▓реЗрдВ!")
        recognizer.adjust_for_ambient_noise(source)
        try:
            audio = recognizer.listen(source, timeout=10, phrase_time_limit=15)
        except sr.WaitTimeoutError:
            print("тЪая╕П рд╕рдордп рд╕рдорд╛рдкреНрддред рдЕрдЧрд▓рд╛ рд╡рд╛рдХреНрдп рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
            continue
        print("рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╕рдорд╛рдкреНрддред рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ...")

    # ---- speech to text ----
    try:
        user_speech = recognizer.recognize_google(audio, language="hi-IN")
        print("\nЁЯЧгя╕П рдЖрдкрдиреЗ рдХрд╣рд╛:\n", user_speech)
    except sr.UnknownValueError:
        print("тЪая╕П рдЖрд╡рд╛рдЬрд╝ рд╕рдордЭ рдореЗрдВ рдирд╣реАрдВ рдЖрдИред рдЕрдЧрд▓рд╛ рд╡рд╛рдХреНрдп рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
        continue
    except sr.RequestError:
        print("тЪая╕П рдЗрдВрдЯрд░рдиреЗрдЯ рдХрдиреЗрдХреНрд╢рди рдирд╣реАрдВред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
        continue

    # ---- accuracy ----
    accuracy = fuzz.token_sort_ratio(hindi_text, user_speech)
    all_scores.append(accuracy)
    print(f"\nтЬЕ рд╢реБрджреНрдзрддрд╛ рдкреНрд░рддрд┐рд╢рдд: {accuracy}%")

    # ---- per-line suggestion ----
    if accuracy < 70:
        print("ЁЯФ┤ рд╕реБрдЭрд╛рд╡: рдкрдврд╝рдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ рдкрд╛рдИ рдЧрдИред Dyslexia рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИред")
    elif accuracy < 85:
        print("ЁЯЯа рд╕реБрдЭрд╛рд╡: рд╣рд▓реНрдХреА рдХрдард┐рдирд╛рдИ рд╣реЛ рд╕рдХрддреА рд╣реИред рдЬрд╛рдБрдЪ рдХрд░рд╡рд╛рдирд╛ рдЙрдЪрд┐рдд рд╣реЛрдЧрд╛ред")
    else:
        print("ЁЯЯв рдкрдврд╝рдирд╛ рд╕рд╣реА рд╣реИред Dyslexia рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рдХрдо рд╣реИред")

# ------------------------------------------------------------
# 3я╕ПтГг  Final summary
# ------------------------------------------------------------
print("\nЁЯУК рдкрд░реАрдХреНрд╖рдг рд╕рдорд╛рдкреНрддред рд╕рднреА рд╡рд╛рдХреНрдпреЛрдВ рдХрд╛ рдореВрд▓реНрдпрд╛рдВрдХрди рдХрд░ рд▓рд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")

if all_scores:
    avg_score = round(statistics.mean(all_scores), 1)
    print(f"\nЁЯФО рдЕрдВрддрд┐рдо рдФрд╕рдд рд╢реБрджреНрдзрддрд╛: {avg_score}%")

    # Final assessment based on average
    if avg_score < 70:
        print("ЁЯТб рдЕрдВрддрд┐рдо рдирд┐рд╖реНрдХрд░реНрд╖: рдкрдврд╝рдиреЗ рдореЗрдВ рдЧрдВрднреАрд░ рдХрдард┐рдирд╛рдИред Dyslexia рдХреА рдЙрдЪреНрдЪ рд╕рдВрднрд╛рд╡рдирд╛ред")
    elif avg_score < 85:
        print("ЁЯТб рдЕрдВрддрд┐рдо рдирд┐рд╖реНрдХрд░реНрд╖: рд╣рд▓реНрдХреА рдХрдард┐рдирд╛рдИ рджреЗрдЦреА рдЧрдИред рдЖрдЧреЗ рдкрд░реАрдХреНрд╖рдг рдХрд░рд╡рд╛рдирд╛ рдЙрдЪрд┐рдд рд╣реЛрдЧрд╛ред")
    else:
        print("ЁЯТб рдЕрдВрддрд┐рдо рдирд┐рд╖реНрдХрд░реНрд╖: рдкрдврд╝рдирд╛ рд╕рд╛рдорд╛рдиреНрдп рд╣реИред Dyslexia рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рдХрдо рд╣реИред")
else:
    print("тЪая╕П рдХреЛрдИ рдорд╛рдиреНрдп рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рд╣реБрдИред")
